// Code generated by MockGen. DO NOT EDIT.
// Source: repository_interface.go

// Package v2 is a generated GoMock package.
package v2

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// delete mocks base method.
func (m *MockIRepository) delete(product *product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "delete", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// delete indicates an expected call of delete.
func (mr *MockIRepositoryMockRecorder) delete(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "delete", reflect.TypeOf((*MockIRepository)(nil).delete), product)
}

// findByUUID mocks base method.
func (m *MockIRepository) findByUUID(uuid string) (*product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "findByUUID", uuid)
	ret0, _ := ret[0].(*product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// findByUUID indicates an expected call of findByUUID.
func (mr *MockIRepositoryMockRecorder) findByUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "findByUUID", reflect.TypeOf((*MockIRepository)(nil).findByUUID), uuid)
}

// insert mocks base method.
func (m *MockIRepository) insert(product *product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "insert", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// insert indicates an expected call of insert.
func (mr *MockIRepositoryMockRecorder) insert(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "insert", reflect.TypeOf((*MockIRepository)(nil).insert), product)
}

// list mocks base method.
func (m *MockIRepository) list(offset, limit int) ([]*product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "list", offset, limit)
	ret0, _ := ret[0].([]*product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// list indicates an expected call of list.
func (mr *MockIRepositoryMockRecorder) list(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "list", reflect.TypeOf((*MockIRepository)(nil).list), offset, limit)
}

// update mocks base method.
func (m *MockIRepository) update(product *product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "update", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// update indicates an expected call of update.
func (mr *MockIRepositoryMockRecorder) update(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "update", reflect.TypeOf((*MockIRepository)(nil).update), product)
}
