// Code generated by MockGen. DO NOT EDIT.
// Source: service_interface.go

// Package notifier is a generated GoMock package.
package notifier

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockINotifier is a mock of INotifier interface.
type MockINotifier struct {
	ctrl     *gomock.Controller
	recorder *MockINotifierMockRecorder
}

// MockINotifierMockRecorder is the mock recorder for MockINotifier.
type MockINotifierMockRecorder struct {
	mock *MockINotifier
}

// NewMockINotifier creates a new mock instance.
func NewMockINotifier(ctrl *gomock.Controller) *MockINotifier {
	mock := &MockINotifier{ctrl: ctrl}
	mock.recorder = &MockINotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotifier) EXPECT() *MockINotifierMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockINotifier) Send(in *NoticationInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", in)
}

// Send indicates an expected call of Send.
func (mr *MockINotifierMockRecorder) Send(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockINotifier)(nil).Send), in)
}

// MockIProvider is a mock of IProvider interface.
type MockIProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIProviderMockRecorder
}

// MockIProviderMockRecorder is the mock recorder for MockIProvider.
type MockIProviderMockRecorder struct {
	mock *MockIProvider
}

// NewMockIProvider creates a new mock instance.
func NewMockIProvider(ctrl *gomock.Controller) *MockIProvider {
	mock := &MockIProvider{ctrl: ctrl}
	mock.recorder = &MockIProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProvider) EXPECT() *MockIProviderMockRecorder {
	return m.recorder
}

// StockChanged mocks base method.
func (m *MockIProvider) StockChanged(oldStock, newStock int, product string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StockChanged", oldStock, newStock, product)
}

// StockChanged indicates an expected call of StockChanged.
func (mr *MockIProviderMockRecorder) StockChanged(oldStock, newStock, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockChanged", reflect.TypeOf((*MockIProvider)(nil).StockChanged), oldStock, newStock, product)
}
